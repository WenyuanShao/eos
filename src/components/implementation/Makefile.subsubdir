# Note: I have added -fno-merge-constants so that all strings will be
# placed in the .rodata section as opposed to .rodata.str1.x | x in
# uints
#
# -Xlinker -r is used to pass flags into the linker, in this case to
# prevent musllibc from creating an executable and linking in many of
# its normal symbols

# I never want to touch this again, but will have to

include Makefile.src Makefile.comp

COMPPATH=$(subst /, ,$(shell pwd))
COMPLEN=$(words $(COMPPATH))
COMPLIST=$(wordlist $(shell echo $(COMPLEN)-1 | bc), $(COMPLEN), $(COMPPATH))
COMPNAME=$(shell echo $(strip $(COMPLIST)) | sed "s/ /./")

# These are compiled in with the components regardless of if they
# export an undefined symbol from the component.  They are a manditory
# link-in.
LIB_ASM_MANDITORY=$(LIBDIR)/$(MANDITORY_LIB)

IF_INCLUDE=$(foreach I,$(INTERFACES),-I$(INTERDIR)/$(I)/)
IF_SERV_STUBS=$(foreach I,$(INTERFACES),$(INTERDIR)/$(I)/$(SERVER_STUB))
#dependency components added to include listings and linker listings
DEP_INC=$(foreach D,$(DEPENDENCIES),-I$(INTERDIR)/$(D)/)
DEP_LIB=$(foreach D,$(DEPENDENCIES),-L$(INTERDIR)/$(D)/)
DEP_LIB_EXIST=$(foreach D, $(DEPENDENCIES), $(if $(wildcard $(INTERDIR)/$(D)/*.a), -l$(D)))
IF_CLIENT_STUBS=$(foreach D, $(DEPENDENCIES),      \
 $(if $(wildcard $(INTERDIR)/$(D)/$(CLIENT_STUB)), \
 $(wildcard $(INTERDIR)/$(D)/$(CLIENT_STUB))))

CLIB=../complib.o
#COMPLIB=$(if $(wildcard $(CLIB)),$(CLIB))
COMPLIB=$(IF_LIB) $(wildcard $(CLIB))
C_OBJS=$(patsubst %.c,%.o,$(wildcard *.c))
CXX_OBJS=$(patsubst %.cc,%.o,$(wildcard *.cc))
ASM_OBJS=$(patsubst %.S,%.o,$(wildcard *.S))
OBJS=$(CXX_OBJS) $(C_OBJS) $(ASM_OBJS) $(COMPLIB) $(OBJLIBS)
TMP_STR=tmp
TMP_STR2=tmp2
INCLUDE=-I../ $(DEP_INC) $(IF_INCLUDE) $(CINC)
LIB_LIBRARIES_PRE=$(DEP_LIB_EXIST)
LIB_LIBRARIES=$(strip $(LIB_LIBRARIES_PRE))
LIB_FLAGS=-L$(LIBDIR) -L$(LIBCXXDIR) $(DEP_LIB) $(LIB_LIBRARIES) $(ADDITIONAL_LIBS)

C_SOURCES=$(C_OBJS:%.o=%.c)
CXX_SOURCES=$(CXX_OBJS:%.o=%.cc)
#NOTE: assembly files don't have dependencies generated for them
SOURCE_DEPENDENCIES=$(C_SOURCES:%.c=%.d) $(CXX_SOURCES:%.cc=%.d)

COMP_LD_SCRIPT=$(IMPLDIR)/comp.ld

FNDEP_DIR=$(CDIR)/cidl
FNDEP_GEN=$(FNDEP_DIR)/comp_undef.py
FNDEP_VERIFY=$(FNDEP_DIR)/verify_completeness.py
IFEXP_GEN=$(FNDEP_DIR)/exp_ifs.py
FNDEP_FILE=.fn_dependencies
IFEXP_FILE=.exported_interfaces

.PHONY: all
all: $(SOURCE_DEPENDENCIES) $(COMPONENT) fndeps

fndeps:
#	@sh $(FNDEP_GEN) c.o > $(FNDEP_FILE)
	@python $(FNDEP_GEN) > $(FNDEP_FILE)
	@python $(IFEXP_GEN) > $(IFEXP_FILE)
	@python $(FNDEP_VERIFY)

# Jumping through hoops: want to link to our libraries first so that
# symbols there are used, thus the gcc, and the ld, but then (and only
# then) do we want to use dietlibc's functions
$(COMPONENT): $(OBJS)
#	$(info |     [LD]   $@: Loading stubs and cos libraries $(if $(strip $(LIB_LIBRARIES)),including $(LIB_LIBRARIES)) into $<)
	$(info |     [LD]   $(COMPNAME) ($@): Linking $(if $(strip $(LIB_LIBRARIES)),$(LIB_LIBRARIES)) $^)
	@$(LD) $(LDFLAGS) -r -o $@.$(TMP_STR) $^ $(IF_SERV_STUBS) $(IF_CLIENT_STUBS) $(LIB_ASM_MANDITORY) $(LIB_FLAGS)
	@$(MUSLCC) $@.$(TMP_STR) $(MUSLCFLAGS) -Xlinker -melf_i386 -o $@.$(TMP_STR2)
	@$(LD) $(LDFLAGS) -r -T $(COMP_LD_SCRIPT) -o $@ $@.$(TMP_STR2)
	@rm $@.$(TMP_STR) $@.$(TMP_STR2)
	@cp $@ c.o

%.o:%.c
	$(info |     [CC]   $<: Compiling)
	@$(MUSLCC) $(INCLUDE) $(CFLAGS) -o $@ -c $<
       
%.o:%.cc
	$(info |     [CXX]  $<: Compiling)
	@$(CXX) $(INCLUDE) $(LIBSTDCXXINC) $(CXXFLAGS) -o $@ -c $<
       
%.o:%.S
	$(info |     [AS]   Compiling assembly file $^ into $@)
#	$(info |     [AS]   $<: Compiling)
	@$(AS) $(INCLUDE) $(ASFLAGS) -c -o $@ $^

# see the make manual: create the .d dependencies from include
# statements.
%.d:%.c
#	$(info |     [DEP]  Creating dependency file for $<)
	@set -e; rm -f $@; \
	$(MUSLCC) -M $(INCLUDE) $(CFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$
	
%.d:%.cc
#	$(info |     [DEP]  Creating dependency file for $<)
	@set -e; rm -f $@; \
	$(CXX) -M $(INCLUDE) $(LIBSTDCXXINC) $(CXXFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

.PHONY: cp
cp:
	$(info |     [CP]   Copying $(COMPONENT) to $(TRANS_DIR))
	@cp $(COMPONENT) $(TRANS_DIR)
	@cp c.o $(TRANS_DIR)/$(COMPNAME).o

.PHONY: clean
clean:
	$(info |     [RM]   Cleaning up implementation directory for component $(COMPNAME))
	@rm -f a.out *.o *.a *.d *.d.* *~ $(FNDEP_FILE) $(IFEXP_FILE)

fresh: clean all

-include $(SOURCE_DEPENDENCIES)
