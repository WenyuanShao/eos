/* Generated by "click-buildtool elem2export" on Thu Jun 29 15:24:17 EDT 2017 */

#include <click/config.h>
#include <click/package.hh>
#include "../elements/analysis/adjusttimestamp.hh"
#include "../elements/analysis/aggregateipflows.hh"
#include "../elements/analysis/anonipaddr.hh"
#include "../elements/analysis/eraseippayload.hh"
#include "../elements/analysis/settimestampdelta.hh"
#include "../elements/analysis/storetimestamp.hh"
#include "../elements/analysis/storeudptimeseqrecord.hh"
#include "../elements/analysis/timefilter.hh"
#include "../elements/analysis/timerange.hh"
#include "../elements/analysis/timesortedsched.hh"
#include "../elements/app/ftpportmapper.hh"
#include "../elements/aqm/adaptivered.hh"
#include "../elements/aqm/red.hh"
#include "../elements/ethernet/arpfaker.hh"
#include "../elements/ethernet/arpprint.hh"
#include "../elements/ethernet/arpquerier.hh"
#include "../elements/ethernet/arpresponder.hh"
#include "../elements/ethernet/arptable.hh"
#include "../elements/ethernet/checkarpheader.hh"
#include "../elements/ethernet/ensureether.hh"
#include "../elements/ethernet/etherencap.hh"
#include "../elements/ethernet/ethermirror.hh"
#include "../elements/ethernet/etherpausesource.hh"
#include "../elements/ethernet/ethervlanencap.hh"
#include "../elements/ethernet/getetheraddress.hh"
#include "../elements/ethernet/hostetherfilter.hh"
#include "../elements/ethernet/setetheraddress.hh"
#include "../elements/ethernet/setvlananno.hh"
#include "../elements/ethernet/storeetheraddress.hh"
#include "../elements/ethernet/stripethervlanheader.hh"
#include "../elements/ethernet/vlandecap.hh"
#include "../elements/ethernet/vlanencap.hh"
#include "../elements/icmp/checkicmpheader.hh"
#include "../elements/icmp/icmperror.hh"
#include "../elements/icmp/icmpipencap.hh"
#include "../elements/icmp/icmppingencap.hh"
#include "../elements/icmp/icmppingresponder.hh"
#include "../elements/icmp/icmppingrewriter.hh"
#include "../elements/icmp/icmprewriter.hh"
#include "../elements/icmp/icmpsendpings.hh"
#include "../elements/ip/checkipheader.hh"
#include "../elements/ip/checkipheader2.hh"
#include "../elements/ip/decipttl.hh"
#include "../elements/ip/fixipsrc.hh"
#include "../elements/ip/getipaddress.hh"
#include "../elements/ip/ipaddrpairrewriter.hh"
#include "../elements/ip/ipaddrrewriter.hh"
#include "../elements/ip/ipclassifier.hh"
#include "../elements/ip/ipencap.hh"
#include "../elements/ip/ipfieldinfo.hh"
#include "../elements/ip/ipfilter.hh"
#include "../elements/ip/ipfragmenter.hh"
#include "../elements/ip/ipgwoptions.hh"
#include "../elements/ip/ipinputcombo.hh"
#include "../elements/ip/ipmirror.hh"
#include "../elements/ip/ipnameinfo.hh"
#include "../elements/ip/ipoutputcombo.hh"
#include "../elements/ip/ipprint.hh"
#include "../elements/ip/ipreassembler.hh"
#include "../elements/ip/iprwpatterns.hh"
#include "../elements/ip/lineariplookup.hh"
#include "../elements/ip/lookupiproute.hh"
#include "../elements/ip/markipce.hh"
#include "../elements/ip/markipheader.hh"
#include "../elements/ip/radixiplookup.hh"
#include "../elements/ip/rfc2507c.hh"
#include "../elements/ip/rfc2507d.hh"
#include "../elements/ip/ripsend.hh"
#include "../elements/ip/rripmapper.hh"
#include "../elements/ip/setipaddress.hh"
#include "../elements/ip/setipchecksum.hh"
#include "../elements/ip/setipdscp.hh"
#include "../elements/ip/setipecn.hh"
#include "../elements/ip/setrandipaddress.hh"
#include "../elements/ip/siphmapper.hh"
#include "../elements/ip/sortediplookup.hh"
#include "../elements/ip/storeipaddress.hh"
#include "../elements/ip/stripipheader.hh"
#include "../elements/ip/truncateippayload.hh"
#include "../elements/ip/unstripipheader.hh"
#include "../elements/simple/simpleidle.hh"
#include "../elements/simple/simplepriosched.hh"
#include "../elements/simple/simplepullswitch.hh"
#include "../elements/simple/simplerrsched.hh"
#include <click/standard/addressinfo.hh>
#include "../elements/standard/align.hh"
#include <click/standard/alignmentinfo.hh>
#include "../elements/standard/annotationinfo.hh"
#include "../elements/standard/averagecounter.hh"
#include "../elements/standard/bandwidthmeter.hh"
#include "../elements/standard/bandwidthshaper.hh"
#include "../elements/standard/block.hh"
#include "../elements/standard/burster.hh"
#include "../elements/standard/bwratedsplitter.hh"
#include "../elements/standard/bwratedunqueue.hh"
#include "../elements/standard/bypass.hh"
#include "../elements/standard/checkcrc32.hh"
#include "../elements/standard/checklength.hh"
#include "../elements/standard/checkpaint.hh"
#include "../elements/standard/classifier.hh"
#include "../elements/standard/clickyinfo.hh"
#include "../elements/standard/clipboard.hh"
#include "../elements/standard/compblock.hh"
#include "../elements/standard/counter.hh"
#include "../elements/standard/delayshaper.hh"
#include "../elements/standard/delayunqueue.hh"
#include "../elements/standard/devirtualizeinfo.hh"
#include "../elements/standard/discard.hh"
#include "../elements/standard/discardnofree.hh"
#include "../elements/standard/dropbroadcasts.hh"
#include "../elements/standard/drr.hh"
#include <click/standard/errorelement.hh>
#include "../elements/standard/flowinfo.hh"
#include "../elements/standard/frontdropqueue.hh"
#include "../elements/standard/fullnotequeue.hh"
#include "../elements/standard/hashswitch.hh"
#include "../elements/standard/hub.hh"
#include "../elements/standard/idle.hh"
#include "../elements/standard/infinitesource.hh"
#include "../elements/standard/inputswitch.hh"
#include "../elements/standard/linkunqueue.hh"
#include "../elements/standard/markmacheader.hh"
#include "../elements/standard/messageelement.hh"
#include "../elements/standard/meter.hh"
#include "../elements/standard/mixedqueue.hh"
#include "../elements/standard/notifierqueue.hh"
#include "../elements/standard/nullelement.hh"
#include "../elements/standard/nulls.hh"
#include "../elements/standard/paint.hh"
#include "../elements/standard/paintswitch.hh"
#include "../elements/standard/painttee.hh"
#include <click/standard/portinfo.hh>
#include "../elements/standard/print.hh"
#include "../elements/standard/priosched.hh"
#include "../elements/standard/pullswitch.hh"
#include "../elements/standard/quicknotequeue.hh"
#include "../elements/standard/quitwatcher.hh"
#include "../elements/standard/randomerror.hh"
#include "../elements/standard/randomsample.hh"
#include "../elements/standard/randomsource.hh"
#include "../elements/standard/randomswitch.hh"
#include "../elements/standard/ratedsource.hh"
#include "../elements/standard/ratedsplitter.hh"
#include "../elements/standard/ratedunqueue.hh"
#include "../elements/standard/resize.hh"
#include "../elements/standard/rrsched.hh"
#include "../elements/standard/rrswitch.hh"
#include <click/standard/scheduleinfo.hh>
#include "../elements/eos/toshmem.hh"
#include "../elements/eos/fromshmem.hh"
#include "../elements/standard/setannobyte.hh"
#include "../elements/standard/setcrc32.hh"
#include "../elements/standard/setpackettype.hh"
#include "../elements/standard/settimestamp.hh"
#include "../elements/standard/shaper.hh"
#include "../elements/standard/simplequeue.hh"
#include "../elements/standard/staticpullswitch.hh"
#include "../elements/standard/staticswitch.hh"
#include "../elements/standard/storedata.hh"
#include "../elements/standard/stridesched.hh"
#include "../elements/standard/strideswitch.hh"
#include "../elements/standard/strip.hh"
#include "../elements/standard/striptonet.hh"
#include "../elements/standard/suppressor.hh"
#include "../elements/standard/switch.hh"
#include "../elements/standard/tee.hh"
#include "../elements/standard/threadsafequeue.hh"
#include "../elements/standard/timedsink.hh"
#include "../elements/standard/timedsource.hh"
#include "../elements/standard/timedunqueue.hh"
#include "../elements/standard/truncate.hh"
#include "../elements/standard/unqueue.hh"
#include "../elements/standard/unqueue2.hh"
#include "../elements/standard/unstrip.hh"
#include "../elements/tcpudp/checktcpheader.hh"
#include "../elements/tcpudp/checkudpheader.hh"
#include "../elements/tcpudp/dynudpipencap.hh"
#include "../elements/tcpudp/iprewriter.hh"
#include "../elements/tcpudp/settcpchecksum.hh"
#include "../elements/tcpudp/setudpchecksum.hh"
#include "../elements/tcpudp/tcpfragmenter.hh"
#include "../elements/tcpudp/tcpipsend.hh"
#include "../elements/tcpudp/tcprewriter.hh"
#include "../elements/tcpudp/udpipencap.hh"
#include "../elements/tcpudp/udprewriter.hh"
#include "../elements/test/bhmtest.hh"
#include "../elements/test/bitvectortest.hh"
#include "../elements/test/checkpacket.hh"
#include "../elements/test/comparepackets.hh"
#include "../elements/test/confparsetest.hh"
#include "../elements/test/cryptotest.hh"
#include "../elements/test/dequetest.hh"
#include "../elements/test/errortest.hh"
#include "../elements/test/functiontest.hh"
#include "../elements/test/handlertask.hh"
#include "../elements/test/hashtabletest.hh"
#include "../elements/test/heaptest.hh"
#include "../elements/test/listtest.hh"
#include "../elements/test/neighborhoodtest.hh"
#include "../elements/test/notifierdebug.hh"
#include "../elements/test/notifiertest.hh"
#include "../elements/test/nulltask.hh"
#include "../elements/test/packettest.hh"
#include "../elements/test/queueyanktest.hh"
#include "../elements/test/randomseed.hh"
#include "../elements/test/schedordertest.hh"
#include "../elements/test/sorttest.hh"
#include "../elements/test/timertest.hh"
#include "../elements/test/tokenbuckettest.hh"
#include "../elements/test/upstreamnotifier.hh"
#include "../elements/test/vectortest.hh"
#include "../elements/threads/spinlockacquire.hh"
#include "../elements/threads/spinlockinfo.hh"
#include "../elements/threads/spinlockrelease.hh"
#include "../elements/threads/staticthreadsched.hh"
CLICK_USING_DECLS
static Element *
beetlemonkey(uintptr_t heywood)
{
  switch (heywood) {
   case 0: return new AdjustTimestamp;
   case 1: return new AggregateIPFlows;
   case 2: return new AnonymizeIPAddr;
   case 3: return new EraseIPPayload;
   case 4: return new SetTimestampDelta;
   case 5: return new StoreTimestamp;
   case 6: return new StoreUDPTimeSeqRecord;
   case 7: return new TimeFilter;
   case 8: return new TimeRange;
   case 9: return new TimeSortedSched;
   case 10: return new FTPPortMapper;
   case 11: return new AdaptiveRED;
   case 12: return new RED;
   case 13: return new ARPFaker;
   case 14: return new ARPPrint;
   case 15: return new ARPQuerier;
   case 16: return new ARPResponder;
   case 17: return new ARPTable;
   case 18: return new CheckARPHeader;
   case 19: return new EnsureEther;
   case 20: return new EtherEncap;
   case 21: return new EtherMirror;
   case 22: return new EtherPauseSource;
   case 23: return new EtherVLANEncap;
   case 24: return new EtherVLANEncap;
   case 25: return new GetEtherAddress;
   case 26: return new HostEtherFilter;
   case 27: return new SetEtherAddress;
   case 28: return new SetVLANAnno;
   case 29: return new SetVLANAnno;
   case 30: return new StoreEtherAddress;
   case 31: return new StripEtherVLANHeader;
   case 32: return new StripEtherVLANHeader;
   case 33: return new VLANDecap;
   case 34: return new VLANEncap;
   case 35: return new CheckICMPHeader;
   case 36: return new ICMPError;
   case 37: return new ICMPIPEncap;
   case 38: return new ICMPPingEncap;
   case 39: return new ICMPPingResponder;
   case 40: return new ICMPPingRewriter;
   case 41: return new ICMPRewriter;
   case 42: return new ICMPPingSource;
   case 43: return new ICMPPingSource;
   case 44: return new CheckIPHeader;
   case 45: return new CheckIPHeader2;
   case 46: return new DecIPTTL;
   case 47: return new FixIPSrc;
   case 48: return new GetIPAddress;
   case 49: return new IPAddrPairRewriter;
   case 50: return new IPAddrRewriter;
   case 51: return new IPClassifier;
   case 52: return new IPEncap;
   case 53: return new IPFieldInfo;
   case 54: return new IPFilter;
   case 55: return new IPFragmenter;
   case 56: return new IPGWOptions;
   case 57: return new IPInputCombo;
   case 58: return new IPMirror;
   case 59: return new IPNameInfo;
   case 60: return new IPOutputCombo;
   case 61: return new IPPrint;
   case 62: return new IPReassembler;
   case 63: return new IPRewriterPatterns;
   case 64: return new LinearIPLookup;
   case 65: return new StaticIPLookup;
   case 66: return new MarkIPCE;
   case 67: return new MarkIPHeader;
   case 68: return new RadixIPLookup;
   case 69: return new RFC2507c;
   case 70: return new RFC2507d;
   case 71: return new RIPSend;
   case 72: return new RoundRobinIPMapper;
   case 73: return new SetIPAddress;
   case 74: return new SetIPChecksum;
   case 75: return new SetIPDSCP;
   case 76: return new SetIPECN;
   case 77: return new SetRandIPAddress;
   case 78: return new SourceIPHashMapper;
   case 79: return new SortedIPLookup;
   case 80: return new StoreIPAddress;
   case 81: return new StripIPHeader;
   case 82: return new TruncateIPPayload;
   case 83: return new UnstripIPHeader;
   case 86: return new SimpleIdle;
   case 87: return new SimplePrioSched;
   case 88: return new SimplePullSwitch;
   case 89: return new SimpleRRSched;
   case 90: return new AddressInfo;
   case 91: return new Align;
   case 92: return new AlignmentInfo;
   case 93: return new AnnotationInfo;
   case 94: return new AverageCounter;
   case 95: return new BandwidthMeter;
   case 96: return new BandwidthShaper;
   case 97: return new Block;
   case 98: return new Burster;
   case 99: return new BandwidthRatedSplitter;
   case 100: return new BandwidthRatedUnqueue;
   case 101: return new Bypass;
   case 102: return new CheckCRC32;
   case 103: return new CheckLength;
   case 104: return new CheckPaint;
   case 105: return new Classifier;
   case 106: return new ClickyInfo;
   case 107: return new Clipboard;
   case 108: return new CompareBlock;
   case 109: return new Counter;
   case 110: return new DelayShaper;
   case 111: return new DelayUnqueue;
   case 112: return new DevirtualizeInfo;
   case 113: return new Discard;
   case 114: return new DiscardNoFree;
   case 115: return new DropBroadcasts;
   case 116: return new DRRSched;
   case 117: return new ErrorElement;
   case 118: return new FlowInfo;
   case 119: return new FrontDropQueue;
   case 120: return new FullNoteQueue;
   case 121: return new FullNoteQueue;
   case 122: return new HashSwitch;
   case 123: return new Hub;
   case 124: return new Idle;
   case 125: return new InfiniteSource;
   case 126: return new InputSwitch;
   case 127: return new LinkUnqueue;
   case 128: return new MarkMACHeader;
   case 129: return new MessageElement;
   case 130: return new Meter;
   case 131: return new MixedQueue;
   case 132: return new NotifierQueue;
   case 133: return new NullElement;
   case 134: return new PushNullElement;
   case 135: return new PullNullElement;
   case 136: return new Null1;
   case 137: return new Null2;
   case 138: return new Null3;
   case 139: return new Null4;
   case 140: return new Null5;
   case 141: return new Null6;
   case 142: return new Null7;
   case 143: return new Null8;
   case 144: return new Paint;
   case 145: return new PaintSwitch;
   case 146: return new PaintTee;
   case 147: return new PortInfo;
   case 148: return new Print;
   case 149: return new PrioSched;
   case 150: return new PullSwitch;
   case 151: return new QuickNoteQueue;
   case 152: return new QuitWatcher;
   case 153: return new RandomBitErrors;
   case 154: return new RandomSample;
   case 155: return new RandomSource;
   case 156: return new RandomSwitch;
   case 157: return new RatedSource;
   case 158: return new RatedSplitter;
   case 159: return new RatedUnqueue;
   case 160: return new Resize;
   case 161: return new RRSched;
   case 162: return new RoundRobinSwitch;
   case 163: return new ScheduleInfo;
   case 164: return new SetAnnoByte;
   case 165: return new SetCRC32;
   case 166: return new SetPacketType;
   case 167: return new SetTimestamp;
   case 168: return new Shaper;
   case 169: return new SimpleQueue;
   case 170: return new StaticPullSwitch;
   case 171: return new StaticSwitch;
   case 172: return new StoreData;
   case 173: return new StrideSched;
   case 174: return new StrideSwitch;
   case 175: return new Strip;
   case 176: return new StripToNetworkHeader;
   case 177: return new Suppressor;
   case 178: return new Switch;
   case 179: return new Tee;
   case 180: return new PullTee;
   case 181: return new ThreadSafeQueue;
   case 182: return new TimedSink;
   case 183: return new TimedSource;
   case 184: return new TimedUnqueue;
   case 185: return new Truncate;
   case 186: return new Unqueue;
   case 187: return new Unqueue2;
   case 188: return new Unstrip;
   case 189: return new CheckTCPHeader;
   case 190: return new CheckUDPHeader;
   case 191: return new DynamicUDPIPEncap;
   case 192: return new IPRewriter;
   case 193: return new SetTCPChecksum;
   case 194: return new SetUDPChecksum;
   case 195: return new TCPFragmenter;
   case 196: return new TCPIPSend;
   case 197: return new TCPRewriter;
   case 198: return new UDPIPEncap;
   case 199: return new UDPRewriter;
   case 200: return new BigHashMapTest;
   case 201: return new BitvectorTest;
   case 202: return new CheckPacket;
   case 203: return new ComparePackets;
   case 204: return new ConfParseTest;
   case 205: return new CryptoTest;
   case 206: return new DequeTest;
   case 207: return new ErrorTest;
   case 208: return new FunctionTest;
   case 209: return new HandlerTask;
   case 210: return new HashTableTest;
   case 211: return new HeapTest;
   case 212: return new ListTest;
   case 213: return new NeighborhoodTest;
   case 214: return new NotifierDebug;
   case 215: return new NotifierTest;
   case 216: return new NullTask;
   case 217: return new PacketTest;
   case 218: return new QueueYankTest;
   case 219: return new RandomSeed;
   case 220: return new SchedOrderTest;
   case 221: return new SortTest;
   case 222: return new TimerTest;
   case 223: return new TokenBucketTest;
   case 224: return new UpstreamNotifier;
   case 225: return new VectorTest;
   case 226: return new SpinlockAcquire;
   case 227: return new SpinlockInfo;
   case 228: return new SpinlockRelease;
   case 229: return new StaticThreadSched;
   case 230: return new ToShmem;
   case 231: return new FromShmem;
   default: return 0;
  }
}

#ifdef CLICK_LINUXMODULE
#define click_add_element_type_stable(n, f, t) click_add_element_type_stable((n), (f), (t), 0)
#endif
void
click_export_elements()
{
  (void) click_add_element_type_stable("AdjustTimestamp", beetlemonkey, 0);
  (void) click_add_element_type_stable("AggregateIPFlows", beetlemonkey, 1);
  (void) click_add_element_type_stable("AnonymizeIPAddr", beetlemonkey, 2);
  (void) click_add_element_type_stable("EraseIPPayload", beetlemonkey, 3);
  (void) click_add_element_type_stable("SetTimestampDelta", beetlemonkey, 4);
  (void) click_add_element_type_stable("StoreTimestamp", beetlemonkey, 5);
  (void) click_add_element_type_stable("StoreUDPTimeSeqRecord", beetlemonkey, 6);
  (void) click_add_element_type_stable("TimeFilter", beetlemonkey, 7);
  (void) click_add_element_type_stable("TimeRange", beetlemonkey, 8);
  (void) click_add_element_type_stable("TimeSortedSched", beetlemonkey, 9);
  (void) click_add_element_type_stable("FTPPortMapper", beetlemonkey, 10);
  (void) click_add_element_type_stable("AdaptiveRED", beetlemonkey, 11);
  (void) click_add_element_type_stable("RED", beetlemonkey, 12);
  (void) click_add_element_type_stable("ARPFaker", beetlemonkey, 13);
  (void) click_add_element_type_stable("ARPPrint", beetlemonkey, 14);
  (void) click_add_element_type_stable("ARPQuerier", beetlemonkey, 15);
  (void) click_add_element_type_stable("ARPResponder", beetlemonkey, 16);
  (void) click_add_element_type_stable("ARPTable", beetlemonkey, 17);
  (void) click_add_element_type_stable("CheckARPHeader", beetlemonkey, 18);
  (void) click_add_element_type_stable("EnsureEther", beetlemonkey, 19);
  (void) click_add_element_type_stable("EtherEncap", beetlemonkey, 20);
  (void) click_add_element_type_stable("EtherMirror", beetlemonkey, 21);
  (void) click_add_element_type_stable("EtherPauseSource", beetlemonkey, 22);
  (void) click_add_element_type_stable("EtherVLANEncap", beetlemonkey, 23);
  (void) click_add_element_type_stable("EtherVlanEncap", beetlemonkey, 24);
  (void) click_add_element_type_stable("GetEtherAddress", beetlemonkey, 25);
  (void) click_add_element_type_stable("HostEtherFilter", beetlemonkey, 26);
  (void) click_add_element_type_stable("SetEtherAddress", beetlemonkey, 27);
  (void) click_add_element_type_stable("SetVLANAnno", beetlemonkey, 28);
  (void) click_add_element_type_stable("SetVlanAnno", beetlemonkey, 29);
  (void) click_add_element_type_stable("StoreEtherAddress", beetlemonkey, 30);
  (void) click_add_element_type_stable("StripEtherVLANHeader", beetlemonkey, 31);
  (void) click_add_element_type_stable("StripEtherVlanHeader", beetlemonkey, 32);
  (void) click_add_element_type_stable("VLANDecap", beetlemonkey, 33);
  (void) click_add_element_type_stable("VLANEncap", beetlemonkey, 34);
  (void) click_add_element_type_stable("CheckICMPHeader", beetlemonkey, 35);
  (void) click_add_element_type_stable("ICMPError", beetlemonkey, 36);
  (void) click_add_element_type_stable("ICMPIPEncap", beetlemonkey, 37);
  (void) click_add_element_type_stable("ICMPPingEncap", beetlemonkey, 38);
  (void) click_add_element_type_stable("ICMPPingResponder", beetlemonkey, 39);
  (void) click_add_element_type_stable("ICMPPingRewriter", beetlemonkey, 40);
  (void) click_add_element_type_stable("ICMPRewriter", beetlemonkey, 41);
  (void) click_add_element_type_stable("ICMPPingSource", beetlemonkey, 42);
  (void) click_add_element_type_stable("ICMPSendPings", beetlemonkey, 43);
  (void) click_add_element_type_stable("CheckIPHeader", beetlemonkey, 44);
  (void) click_add_element_type_stable("CheckIPHeader2", beetlemonkey, 45);
  (void) click_add_element_type_stable("DecIPTTL", beetlemonkey, 46);
  (void) click_add_element_type_stable("FixIPSrc", beetlemonkey, 47);
  (void) click_add_element_type_stable("GetIPAddress", beetlemonkey, 48);
  (void) click_add_element_type_stable("IPAddrPairRewriter", beetlemonkey, 49);
  (void) click_add_element_type_stable("IPAddrRewriter", beetlemonkey, 50);
  (void) click_add_element_type_stable("IPClassifier", beetlemonkey, 51);
  (void) click_add_element_type_stable("IPEncap", beetlemonkey, 52);
  (void) click_add_element_type_stable("IPFieldInfo", beetlemonkey, 53);
  IPFieldInfo::static_initialize();
  (void) click_add_element_type_stable("IPFilter", beetlemonkey, 54);
  IPFilter::static_initialize();
  (void) click_add_element_type_stable("IPFragmenter", beetlemonkey, 55);
  (void) click_add_element_type_stable("IPGWOptions", beetlemonkey, 56);
  (void) click_add_element_type_stable("IPInputCombo", beetlemonkey, 57);
  (void) click_add_element_type_stable("IPMirror", beetlemonkey, 58);
  (void) click_add_element_type_stable("IPNameInfo", beetlemonkey, 59);
  IPNameInfo::static_initialize();
  (void) click_add_element_type_stable("IPOutputCombo", beetlemonkey, 60);
  (void) click_add_element_type_stable("IPPrint", beetlemonkey, 61);
  (void) click_add_element_type_stable("IPReassembler", beetlemonkey, 62);
  (void) click_add_element_type_stable("IPRewriterPatterns", beetlemonkey, 63);
  (void) click_add_element_type_stable("LinearIPLookup", beetlemonkey, 64);
  (void) click_add_element_type_stable("StaticIPLookup", beetlemonkey, 65);
  (void) click_add_element_type_stable("MarkIPCE", beetlemonkey, 66);
  (void) click_add_element_type_stable("MarkIPHeader", beetlemonkey, 67);
  (void) click_add_element_type_stable("RadixIPLookup", beetlemonkey, 68);
  (void) click_add_element_type_stable("RFC2507Comp", beetlemonkey, 69);
  (void) click_add_element_type_stable("RFC2507Decomp", beetlemonkey, 70);
  (void) click_add_element_type_stable("RIPSend", beetlemonkey, 71);
  (void) click_add_element_type_stable("RoundRobinIPMapper", beetlemonkey, 72);
  (void) click_add_element_type_stable("SetIPAddress", beetlemonkey, 73);
  (void) click_add_element_type_stable("SetIPChecksum", beetlemonkey, 74);
  (void) click_add_element_type_stable("SetIPDSCP", beetlemonkey, 75);
  (void) click_add_element_type_stable("SetIPECN", beetlemonkey, 76);
  (void) click_add_element_type_stable("SetRandIPAddress", beetlemonkey, 77);
  (void) click_add_element_type_stable("SourceIPHashMapper", beetlemonkey, 78);
  (void) click_add_element_type_stable("SortedIPLookup", beetlemonkey, 79);
  (void) click_add_element_type_stable("StoreIPAddress", beetlemonkey, 80);
  (void) click_add_element_type_stable("StripIPHeader", beetlemonkey, 81);
  (void) click_add_element_type_stable("TruncateIPPayload", beetlemonkey, 82);
  (void) click_add_element_type_stable("UnstripIPHeader", beetlemonkey, 83);
  (void) click_add_element_type_stable("FromDevice", beetlemonkey, 84);
  (void) click_add_element_type_stable("ToDevice", beetlemonkey, 85);
  (void) click_add_element_type_stable("SimpleIdle", beetlemonkey, 86);
  (void) click_add_element_type_stable("SimplePrioSched", beetlemonkey, 87);
  (void) click_add_element_type_stable("SimplePullSwitch", beetlemonkey, 88);
  (void) click_add_element_type_stable("SimpleRoundRobinSched", beetlemonkey, 89);
  (void) click_add_element_type_stable("AddressInfo", beetlemonkey, 90);
  (void) click_add_element_type_stable("Align", beetlemonkey, 91);
  (void) click_add_element_type_stable("AlignmentInfo", beetlemonkey, 92);
  (void) click_add_element_type_stable("AnnotationInfo", beetlemonkey, 93);
  (void) click_add_element_type_stable("AverageCounter", beetlemonkey, 94);
  (void) click_add_element_type_stable("BandwidthMeter", beetlemonkey, 95);
  (void) click_add_element_type_stable("BandwidthShaper", beetlemonkey, 96);
  (void) click_add_element_type_stable("Block", beetlemonkey, 97);
  (void) click_add_element_type_stable("Burster", beetlemonkey, 98);
  (void) click_add_element_type_stable("BandwidthRatedSplitter", beetlemonkey, 99);
  (void) click_add_element_type_stable("BandwidthRatedUnqueue", beetlemonkey, 100);
  (void) click_add_element_type_stable("Bypass", beetlemonkey, 101);
  (void) click_add_element_type_stable("CheckCRC32", beetlemonkey, 102);
  (void) click_add_element_type_stable("CheckLength", beetlemonkey, 103);
  (void) click_add_element_type_stable("CheckPaint", beetlemonkey, 104);
  (void) click_add_element_type_stable("Classifier", beetlemonkey, 105);
  (void) click_add_element_type_stable("ClickyInfo", beetlemonkey, 106);
  (void) click_add_element_type_stable("Clipboard", beetlemonkey, 107);
  (void) click_add_element_type_stable("CompareBlock", beetlemonkey, 108);
  (void) click_add_element_type_stable("Counter", beetlemonkey, 109);
  (void) click_add_element_type_stable("DelayShaper", beetlemonkey, 110);
  (void) click_add_element_type_stable("DelayUnqueue", beetlemonkey, 111);
  (void) click_add_element_type_stable("DevirtualizeInfo", beetlemonkey, 112);
  (void) click_add_element_type_stable("Discard", beetlemonkey, 113);
  (void) click_add_element_type_stable("DiscardNoFree", beetlemonkey, 114);
  (void) click_add_element_type_stable("DropBroadcasts", beetlemonkey, 115);
  (void) click_add_element_type_stable("DRRSched", beetlemonkey, 116);
  (void) click_add_element_type_stable("ErrorElement", beetlemonkey, 117);
  (void) click_add_element_type_stable("FlowInfo", beetlemonkey, 118);
  (void) click_add_element_type_stable("FrontDropQueue", beetlemonkey, 119);
  (void) click_add_element_type_stable("Queue", beetlemonkey, 120);
  (void) click_add_element_type_stable("FullNoteQueue", beetlemonkey, 121);
  (void) click_add_element_type_stable("HashSwitch", beetlemonkey, 122);
  (void) click_add_element_type_stable("Hub", beetlemonkey, 123);
  (void) click_add_element_type_stable("Idle", beetlemonkey, 124);
  (void) click_add_element_type_stable("InfiniteSource", beetlemonkey, 125);
  (void) click_add_element_type_stable("InputSwitch", beetlemonkey, 126);
  (void) click_add_element_type_stable("LinkUnqueue", beetlemonkey, 127);
  (void) click_add_element_type_stable("MarkMACHeader", beetlemonkey, 128);
  (void) click_add_element_type_stable("Message", beetlemonkey, 129);
  (void) click_add_element_type_stable("Meter", beetlemonkey, 130);
  (void) click_add_element_type_stable("MixedQueue", beetlemonkey, 131);
  (void) click_add_element_type_stable("NotifierQueue", beetlemonkey, 132);
  (void) click_add_element_type_stable("Null", beetlemonkey, 133);
  (void) click_add_element_type_stable("PushNull", beetlemonkey, 134);
  (void) click_add_element_type_stable("PullNull", beetlemonkey, 135);
  (void) click_add_element_type_stable("Null1", beetlemonkey, 136);
  (void) click_add_element_type_stable("Null2", beetlemonkey, 137);
  (void) click_add_element_type_stable("Null3", beetlemonkey, 138);
  (void) click_add_element_type_stable("Null4", beetlemonkey, 139);
  (void) click_add_element_type_stable("Null5", beetlemonkey, 140);
  (void) click_add_element_type_stable("Null6", beetlemonkey, 141);
  (void) click_add_element_type_stable("Null7", beetlemonkey, 142);
  (void) click_add_element_type_stable("Null8", beetlemonkey, 143);
  (void) click_add_element_type_stable("Paint", beetlemonkey, 144);
  (void) click_add_element_type_stable("PaintSwitch", beetlemonkey, 145);
  (void) click_add_element_type_stable("PaintTee", beetlemonkey, 146);
  (void) click_add_element_type_stable("PortInfo", beetlemonkey, 147);
  (void) click_add_element_type_stable("Print", beetlemonkey, 148);
  (void) click_add_element_type_stable("PrioSched", beetlemonkey, 149);
  (void) click_add_element_type_stable("PullSwitch", beetlemonkey, 150);
  (void) click_add_element_type_stable("QuickNoteQueue", beetlemonkey, 151);
  (void) click_add_element_type_stable("QuitWatcher", beetlemonkey, 152);
  (void) click_add_element_type_stable("RandomBitErrors", beetlemonkey, 153);
  (void) click_add_element_type_stable("RandomSample", beetlemonkey, 154);
  (void) click_add_element_type_stable("RandomSource", beetlemonkey, 155);
  (void) click_add_element_type_stable("RandomSwitch", beetlemonkey, 156);
  (void) click_add_element_type_stable("RatedSource", beetlemonkey, 157);
  (void) click_add_element_type_stable("RatedSplitter", beetlemonkey, 158);
  (void) click_add_element_type_stable("RatedUnqueue", beetlemonkey, 159);
  (void) click_add_element_type_stable("Resize", beetlemonkey, 160);
  (void) click_add_element_type_stable("RoundRobinSched", beetlemonkey, 161);
  (void) click_add_element_type_stable("RoundRobinSwitch", beetlemonkey, 162);
  (void) click_add_element_type_stable("ScheduleInfo", beetlemonkey, 163);
  (void) click_add_element_type_stable("SetAnnoByte", beetlemonkey, 164);
  (void) click_add_element_type_stable("SetCRC32", beetlemonkey, 165);
  (void) click_add_element_type_stable("SetPacketType", beetlemonkey, 166);
  (void) click_add_element_type_stable("SetTimestamp", beetlemonkey, 167);
  (void) click_add_element_type_stable("Shaper", beetlemonkey, 168);
  (void) click_add_element_type_stable("SimpleQueue", beetlemonkey, 169);
  (void) click_add_element_type_stable("StaticPullSwitch", beetlemonkey, 170);
  (void) click_add_element_type_stable("StaticSwitch", beetlemonkey, 171);
  (void) click_add_element_type_stable("StoreData", beetlemonkey, 172);
  (void) click_add_element_type_stable("StrideSched", beetlemonkey, 173);
  (void) click_add_element_type_stable("StrideSwitch", beetlemonkey, 174);
  (void) click_add_element_type_stable("Strip", beetlemonkey, 175);
  (void) click_add_element_type_stable("StripToNetworkHeader", beetlemonkey, 176);
  (void) click_add_element_type_stable("Suppressor", beetlemonkey, 177);
  (void) click_add_element_type_stable("Switch", beetlemonkey, 178);
  (void) click_add_element_type_stable("Tee", beetlemonkey, 179);
  (void) click_add_element_type_stable("PullTee", beetlemonkey, 180);
  (void) click_add_element_type_stable("ThreadSafeQueue", beetlemonkey, 181);
  (void) click_add_element_type_stable("TimedSink", beetlemonkey, 182);
  (void) click_add_element_type_stable("TimedSource", beetlemonkey, 183);
  (void) click_add_element_type_stable("TimedUnqueue", beetlemonkey, 184);
  (void) click_add_element_type_stable("Truncate", beetlemonkey, 185);
  (void) click_add_element_type_stable("Unqueue", beetlemonkey, 186);
  (void) click_add_element_type_stable("Unqueue2", beetlemonkey, 187);
  (void) click_add_element_type_stable("Unstrip", beetlemonkey, 188);
  (void) click_add_element_type_stable("CheckTCPHeader", beetlemonkey, 189);
  (void) click_add_element_type_stable("CheckUDPHeader", beetlemonkey, 190);
  (void) click_add_element_type_stable("DynamicUDPIPEncap", beetlemonkey, 191);
  (void) click_add_element_type_stable("IPRewriter", beetlemonkey, 192);
  (void) click_add_element_type_stable("SetTCPChecksum", beetlemonkey, 193);
  (void) click_add_element_type_stable("SetUDPChecksum", beetlemonkey, 194);
  (void) click_add_element_type_stable("TCPFragmenter", beetlemonkey, 195);
  (void) click_add_element_type_stable("TCPIPSend", beetlemonkey, 196);
  (void) click_add_element_type_stable("TCPRewriter", beetlemonkey, 197);
  (void) click_add_element_type_stable("UDPIPEncap", beetlemonkey, 198);
  (void) click_add_element_type_stable("UDPRewriter", beetlemonkey, 199);
  (void) click_add_element_type_stable("BigHashMapTest", beetlemonkey, 200);
  (void) click_add_element_type_stable("BitvectorTest", beetlemonkey, 201);
  (void) click_add_element_type_stable("CheckPacket", beetlemonkey, 202);
  (void) click_add_element_type_stable("ComparePackets", beetlemonkey, 203);
  (void) click_add_element_type_stable("ConfParseTest", beetlemonkey, 204);
  (void) click_add_element_type_stable("CryptoTest", beetlemonkey, 205);
  (void) click_add_element_type_stable("DequeTest", beetlemonkey, 206);
  (void) click_add_element_type_stable("ErrorTest", beetlemonkey, 207);
  (void) click_add_element_type_stable("FunctionTest", beetlemonkey, 208);
  (void) click_add_element_type_stable("HandlerTask", beetlemonkey, 209);
  (void) click_add_element_type_stable("HashTableTest", beetlemonkey, 210);
  (void) click_add_element_type_stable("HeapTest", beetlemonkey, 211);
  (void) click_add_element_type_stable("ListTest", beetlemonkey, 212);
  (void) click_add_element_type_stable("NeighborhoodTest", beetlemonkey, 213);
  (void) click_add_element_type_stable("NotifierDebug", beetlemonkey, 214);
  (void) click_add_element_type_stable("NotifierTest", beetlemonkey, 215);
  (void) click_add_element_type_stable("NullTask", beetlemonkey, 216);
  (void) click_add_element_type_stable("PacketTest", beetlemonkey, 217);
  (void) click_add_element_type_stable("QueueYankTest", beetlemonkey, 218);
  (void) click_add_element_type_stable("RandomSeed", beetlemonkey, 219);
  (void) click_add_element_type_stable("SchedOrderTest", beetlemonkey, 220);
  (void) click_add_element_type_stable("SortTest", beetlemonkey, 221);
  (void) click_add_element_type_stable("TimerTest", beetlemonkey, 222);
  (void) click_add_element_type_stable("TokenBucketTest", beetlemonkey, 223);
  (void) click_add_element_type_stable("UpstreamNotifier", beetlemonkey, 224);
  (void) click_add_element_type_stable("VectorTest", beetlemonkey, 225);
  (void) click_add_element_type_stable("SpinlockAcquire", beetlemonkey, 226);
  (void) click_add_element_type_stable("SpinlockInfo", beetlemonkey, 227);
  (void) click_add_element_type_stable("SpinlockRelease", beetlemonkey, 228);
  (void) click_add_element_type_stable("StaticThreadSched", beetlemonkey, 229);
  (void) click_add_element_type_stable("ToShmem", beetlemonkey, 230);
  (void) click_add_element_type_stable("FromShmem", beetlemonkey, 231);
  CLICK_DMALLOC_REG("nXXX");
}

void
click_unexport_elements()
{
  IPFieldInfo::static_cleanup();
  IPFilter::static_cleanup();
  IPNameInfo::static_cleanup();
}
